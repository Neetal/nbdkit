=head1 NAME

nbdkit-sh-plugin - nbdkit shell, script or executable plugin

=head1 SYNOPSIS

 nbdkit sh /path/to/script [arguments...]

 nbdkit sh - <<'EOF'
 ... shell script ...
 EOF

=head1 DESCRIPTION

C<nbdkit-sh-plugin> allows you to write plugins for L<nbdkit(1)> using
arbitrary scripting languages, including shells like L<bash(1)>,
L<dash(1)>, L<csh(1)>, L<zsh(1)> etc., other scripting environments,
or any executable.  Note if you want to use an established scripting
language like Perl or Python, then nbdkit has specific plugins to
handle those languages and those will be more efficient (see
L<nbdkit(1)> for a complete list).

=head2 If you have been given an nbdkit sh plugin

Assuming you have a shell script which is an nbdkit plugin, you run it
like this:

 nbdkit sh /path/to/script

You may have to add further C<key=value> arguments to the command
line.  The script must be executable (C<chmod +x>).

=head2 Inline shell scripts

It is also possible to write a shell script plugin "inline" using C<->
as the name of the script, like this:

 nbdkit sh - <<'EOF'
   case "$1" in
     get_size) echo 1M ;;
     pread) dd if=/dev/zero count=$3 iflag=count_bytes ;;
     *) exit 2 ;;
   esac
 EOF

By default the inline script runs under F</bin/sh>.  You can add a
shebang (C<#!>) to use other scripting languages.

=head1 WRITING AN NBDKIT SH PLUGIN

For an example plugin written in Bash, see:
L<https://github.com/libguestfs/nbdkit/blob/master/plugins/sh/example.sh>

Broadly speaking, nbdkit shell plugins work like C ones, so you should
read L<nbdkit-plugin(3)> first.

=head2 Programming model

This plugin has a simple programming model: For every plugin method
that needs to be called, the external script is invoked with
parameters describing the method and its arguments.  The first
parameter is always the method name.  For example:

 /path/to/script config file disk.img
                   │      │   │
                   │      │   └─ value ($3)
                   │      └── key ($2)
               method ($1)

 /path/to/script pread <handle> <count> <offset>
                   │       │       │       │
                   │       │       │       └─ offset in bytes ($4)
                   │       │       └── request size in bytes ($3)
               method ($1) └── handle ($2) ─ see "Handles" below

=head2 Exit codes

The script should exit with specific exit codes:

=over 4

=item S<0>

The method was executed successfully.

=item 1 and 8-127

There was an error.  The script may print on stderr an errno and a
message, for example:

 ENOSPC Out of space

If the script doesn't print anything or the output cannot be parsed
then nbdkit assumes error C<EIO>.

=item S<2>

The requested method is not supported by the script.

=item S<3>

For methods which return booleans, this code indicates false.

=item 4, 5, 6, 7

These exit codes are reserved for future use.

=back

=head2 Temporary directory

A fresh script is invoked for each method call (ie. scripts are
stateless), so if the script needs to store state it has to store it
somewhere in the filesystem in a format and location which is left up
to the author of the script.

However nbdkit helps by creating a randomly named, empty directory for
the script.  This directory persists for the lifetime of nbdkit and is
deleted when nbdkit exits.  The name of the directory is passed to
each script invocation in the C<$tmpdir> environment variable.

=head2 Handles

Handles are arbitrary strings, but it is best to limit them to short
alphanumeric strings.

=head3 Per-connection state

The temporary directory described above can be used for state for the
lifetime of the nbdkit instance (across multiple connections).  If you
want to store state per connection then one way to do it is to create
a randomly named subdirectory under the temporary directory:

 case "$1" in
   ...
   open)
     mktemp -d $tmpdir/handle-XXXXXX ;;

The handle will be the subdirectory name, returned to the script as
C<$2> in all connected calls (eg. C<pread>, C<get_size>).  You can
delete the subdirectory explicitly in C<close>:

 case "$1" in
   ...
   close)
     rm -rf "$2" ;;

or rely on nbdkit deleting the whole temporary directory including all
per-handle subdirectories when it exits.

=head2 Methods

This just documents the arguments to the script corresponding to each
plugin method, and any way that they differ from the C callbacks.  In
all other respects they work the same way as the C callbacks, so you
should go and read L<nbdkit-plugin(3)>.

=over 4

=item C<load>

 /path/to/script load

=item C<unload>

 /path/to/script unload

This is called just before nbdkit exits.  Errors from this method are
ignored.

=item C<dump_plugin>

 /path/to/script dump_plugin

=item C<config>

 /path/to/script config <key> <value>

=item C<config_complete>

 /path/to/script config_complete

=item C<open>

 /path/to/script open <readonly>

The C<readonly> parameter will be C<true> or C<false>.

On success this should print the handle (any string) on stdout and
exit with code C<0>.  If the handle ends with a newline character then
the newline is removed.

Unlike C plugins, this method is I<not> required.  If omitted then the
handle will be C<""> (empty string).

=item C<close>

 /path/to/script close <handle>

=item C<get_size>

 /path/to/script get_size <handle>

The script should print the size of the disk image on stdout.  You can
print the size in bytes, or use any format understood by
C<nbdkit_parse_size> such as C<1M> (see
L<nbdkit-plugin(3)/PARSING SIZE PARAMETERS>).

This method is required.

=item C<can_write>

=item C<can_flush>

=item C<can_trim>

=item C<can_zero>

=item C<can_extents>

Unlike in other languages, you B<must> provide the C<can_*> methods
otherwise they are assumed to all return false and your C<pwrite>,
C<flush>, C<trim>, C<zero> and C<extents> methods will never be
called.  The reason for this is obscure: In other languages we can
detect if (eg) a C<pwrite> method is defined and synthesize an
appropriate response if no actual C<can_write> method is defined.
However detecting if methods are present without running them is not
possible with this plugin.

 /path/to/script can_write <handle>
 /path/to/script can_flush <handle>
 /path/to/script can_trim <handle>
 /path/to/script can_zero <handle>
 /path/to/script can_extents <handle>

The script should exit with code C<0> for true or code C<3> for false.

=item C<is_rotational>

 /path/to/script is_rotational <handle>

The script should exit with code C<0> for true or code C<3> for false.

=item C<can_fua>

=item C<can_cache>

 /path/to/script can_fua <handle>
 /path/to/script can_cache <handle>

These control Forced Unit Access (FUA) and caching behaviour of the
core server.

Unlike the other C<can_*> callbacks, these two are I<not> a boolean.
They must print either "none", "emulate" or "native" to stdout.  The
meaning of these is described in L<nbdkit-plugin(3)>.  Furthermore,
you B<must> provide a C<can_cache> method if you desire the C<cache>
callback to be utilized, similar to the reasoning behind requiring
C<can_write> to utilize C<pwrite>.

=item C<can_multi_conn>

 /path/to/script can_multi_conn <handle>

The script should exit with code C<0> for true or code C<3> for false.

=item C<pread>

 /path/to/script pread <handle> <count> <offset>

The script should print the requested binary data on stdout.  Exactly
C<count> bytes must be printed.

This method is required.

=item C<pwrite>

 /path/to/script pwrite <handle> <count> <offset> <flags>

The script should read the binary data to be written from stdin.

The C<flags> parameter can be an empty string or C<"fua">.  In the
future, a comma-separated list of flags may be present.

Unlike in other languages, if you provide a C<pwrite> method you
B<must> also provide a C<can_write> method which exits with code C<0>
(true).

=item C<flush>

 /path/to/script flush <handle>

Unlike in other languages, if you provide a C<flush> method you
B<must> also provide a C<can_flush> method which exits with code C<0>
(true).

=item C<trim>

 /path/to/script trim <handle> <count> <offset> <flags>

The C<flags> parameter can be an empty string or C<"fua">.  In the
future, a comma-separated list of flags may be present.

Unlike in other languages, if you provide a C<trim> method you B<must>
also provide a C<can_trim> method which exits with code C<0> (true).

=item C<zero>

 /path/to/script zero <handle> <count> <offset> <flags>

The C<flags> parameter can be an empty string or a comma-separated
list of the flags: C<"fua"> and C<"may_trim"> (eg. C<"">, C<"fua">,
C<"fua,may_trim"> are all possible values).

Unlike in other languages, if you provide a C<zero> method you B<must>
also provide a C<can_zero> method which exits with code C<0> (true).

=item C<extents>

 /path/to/script extents <handle> <count> <offset> <flags>

The C<flags> parameter can be an empty string or C<"req_one">.

This must print, one per line on stdout, a list of one or more extents
in the format:

 offset length type

which correspond to the inputs of the C C<nbdkit_add_extent> function
(see L<nbdkit-plugin(3)>).  The C<offset> and C<length> fields may use
any format understood by C<nbdkit_parse_size>.  The optional C<type>
field may be an integer, missing (same as 0), or a comma-separated
list of the words C<hole> and C<zero>.  An example of a valid set of
extents covering a C<10M> disk where the first megabyte only is
allocated data:

 0  1M
 1M 9M  hole,zero

Unlike in other languages, if you provide an C<extents> method you
B<must> also provide a C<can_extents> method which exits with code
C<0> (true).

=item C<cache>

 /path/to/script cache <handle> <count> <offset>

Unlike in other languages, if you provide a C<cache> method you
B<must> also provide a C<can_cache> method which prints "native" and
exits with code C<0> (true).

=back

=head2 Missing callbacks

=over 4

=item Missing: C<name>, C<version>, C<longname>,
C<description>, C<config_help>

These are not yet supported.

=back

=head2 Threads

The thread model for scripts currently cannot be set from this plugin.
It is hard-coded in the C part to
C<NBDKIT_THREAD_MODEL_SERIALIZE_ALL_REQUESTS>.  This may change or be
settable in future.

=head1 SEE ALSO

L<nbdkit(1)>,
L<nbdkit-plugin(3)>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2018-2019 Red Hat Inc.
