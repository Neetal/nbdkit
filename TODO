To-do list for nbdkit
======================================================================

General ideas for improvements
------------------------------

* Listen on specific interfaces or protocols (eg. only IPv6).

* syslog? journal?

* Performance - measure and improve it.

* Bash tab completion.

* Exit on last connection (the default behaviour of qemu-nbd unless
  you use -t).

* Limit number of incoming connections (like qemu-nbd -e).

* Async callbacks.  The current parallel support requires one thread
  per pending message; a solution with fewer threads would split
  low-level code between request and response, where the callback has
  to inform nbdkit when the response is ready:
  https://www.redhat.com/archives/libguestfs/2018-January/msg00149.html

* More NBD protocol features. Qemu has implemented Structured Replies,
  which allows for more efficient serving of sparse files.  Also in
  the upstream pipeline: proposals for block status and online resize.

Suggestions for plugins
-----------------------

* XVA files
  https://lists.gnu.org/archive/html/qemu-devel/2017-11/msg02971.html
  is a partial solution but it needs cleaning up.

* glance

* cinder

Note: qemu supports other formats such as libssh, libnfs, iscsi,
gluster and ceph/rbd, and while similar plugins could be written for
nbdkit there is no compelling reason unless the result is better than
qemu-nbd.  For the majority of users it would be better if they were
directed to qemu-nbd for these use cases.

Suggestions for filters
-----------------------

* injecting artificial errors or otherwise masking plugin features
  (such as hiding zero support) for testing clients

* logging all client commands

nbdkit-cache-filter needs considerable work:

* allow the user to limit the total size of the cache

* handle ENOSPC errors

* implement some cache replacement policies

* some sort of background task or thread to write out dirty blocks

Composing nbdkit
----------------

Filters allow certain types of composition, but others would not be
possible, for example RAIDing over multiple nbd sources.  Because the
plugin API limits us to loading a single plugin to the server, the
best way to do this (and the most robust) is to compose multiple
nbdkit processes.

The nbd plugin (plugins/nbd) already contains an NBD client, so we
could factor this client out and make it available to other plugins to
use.

Tests
-----

* tests/test-single.sh: This test (of the -s option) needs
  considerable work.
